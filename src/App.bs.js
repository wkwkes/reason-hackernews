// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Printf = require("bs-platform/lib/js/printf.js");
var Hashtbl = require("bs-platform/lib/js/hashtbl.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var Table$ReactHooksTemplate = require("./Table.bs.js");
var Utils$ReactHooksTemplate = require("./Utils.bs.js");
var Search$ReactHooksTemplate = require("./Search.bs.js");
var ReadJson$ReactHooksTemplate = require("./ReadJson.bs.js");
var WithLoad$ReactHooksTemplate = require("./WithLoad.bs.js");
var Constants$ReactHooksTemplate = require("./Constants.bs.js");

((require('./app.css')));

function onDismiss(results, searchTerm, id, _evt) {
  var match = Hashtbl.find(results, searchTerm);
  Hashtbl.add(results, searchTerm, /* tuple */[
        match[0],
        List.filter((function (item) {
                  return item[/* objectID */5] !== id;
                }))(match[1])
      ]);
  return /* Click */Block.__(0, [results]);
}

function fetchSearchTopStories(reducer, isloading, results, searchTerm, load) {
  Curry._1(isloading, true);
  var url = Constants$ReactHooksTemplate.path_base + (Constants$ReactHooksTemplate.path_search + ("?" + (Constants$ReactHooksTemplate.param_search + (searchTerm + ("&" + Constants$ReactHooksTemplate.page_param)))));
  var $$fetch$1 = function (url, res, page) {
    fetch(url).then((function (prim) {
                  return prim.text();
                })).then((function (jsonText) {
                return Promise.resolve(ReadJson$ReactHooksTemplate.parseDataResponseJson(JSON.parse(jsonText)));
              })).then((function (data) {
              Hashtbl.add(results, searchTerm, /* tuple */[
                    page,
                    Pervasives.$at(res, data)
                  ]);
              Curry._1(reducer, results);
              Curry._1(isloading, false);
              return Promise.resolve(/* () */0);
            })).catch((function (param) {
            return Promise.resolve(/* () */0);
          }));
    return /* () */0;
  };
  var exit = 0;
  var val;
  try {
    val = Hashtbl.find(results, searchTerm);
    exit = 1;
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return $$fetch$1(url + "0", /* [] */0, 0);
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    var page = val[0];
    if (load) {
      return $$fetch$1(url + String(page + 1 | 0), val[1], page + 1 | 0);
    } else {
      return Curry._1(reducer, results);
    }
  }
  
}

function onSearchChange(evt) {
  var vl = evt.target.value;
  return /* Change */Block.__(1, [vl]);
}

function onSearchSubmit(reducer, isloading, results, evt) {
  evt.preventDefault();
  var vl = Caml_array.caml_array_get(evt.target.children, 0).value;
  fetchSearchTopStories(reducer, isloading, results, vl, false);
  return /* Nope */0;
}

function onLoadMore(reducer, isloading, results, searchTerm, param) {
  fetchSearchTopStories(reducer, isloading, results, searchTerm, true);
  return /* Nope */0;
}

function App(Props) {
  var reducer = function (state, action) {
    var exit = 0;
    if (typeof action === "number") {
      return state;
    } else {
      switch (action.tag | 0) {
        case 0 : 
        case 2 : 
            exit = 1;
            break;
        case 1 : 
        case 3 : 
            exit = 2;
            break;
        case 4 : 
            return /* record */[
                    /* results */state[/* results */0],
                    /* searchTerm */state[/* searchTerm */1],
                    /* isLoading */action[0]
                  ];
        
      }
    }
    switch (exit) {
      case 1 : 
          return /* record */[
                  /* results */action[0],
                  /* searchTerm */state[/* searchTerm */1],
                  /* isLoading */state[/* isLoading */2]
                ];
      case 2 : 
          return /* record */[
                  /* results */state[/* results */0],
                  /* searchTerm */action[0],
                  /* isLoading */state[/* isLoading */2]
                ];
      
    }
  };
  var match = React.useReducer(reducer, /* record */[
        /* results */Hashtbl.create(undefined, 100),
        /* searchTerm */Constants$ReactHooksTemplate.default_query,
        /* isLoading */true
      ]);
  var reduce = match[1];
  var state = match[0];
  React.useEffect((function () {
          Printf.printf(/* Format */[
                /* String_literal */Block.__(11, [
                    "print",
                    /* End_of_format */0
                  ]),
                "print"
              ]);
          fetchSearchTopStories((function (data) {
                  return Curry._1(reduce, /* Update */Block.__(2, [data]));
                }), (function (b) {
                  return Curry._1(reduce, /* UpdateLoad */Block.__(4, [b]));
                }), state[/* results */0], state[/* searchTerm */1], false);
          return (function (param) {
                    return /* () */0;
                  });
        }), ([]));
  var tmp;
  try {
    tmp = Hashtbl.find(state[/* results */0], state[/* searchTerm */1])[1];
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      tmp = /* [] */0;
    } else {
      throw exn;
    }
  }
  return React.createElement("div", {
              className: "page"
            }, React.createElement("div", {
                  className: "interactions"
                }, React.createElement(Search$ReactHooksTemplate.make, {
                      value: state[/* searchTerm */1],
                      onChange: (function (evt) {
                          return Curry._1(reduce, onSearchChange(evt));
                        }),
                      onSubmit: (function (evt) {
                          return Curry._1(reduce, onSearchSubmit((function (data) {
                                            return Curry._1(reduce, /* Update */Block.__(2, [data]));
                                          }), (function (b) {
                                            return Curry._1(reduce, /* UpdateLoad */Block.__(4, [b]));
                                          }), state[/* results */0], evt));
                        })
                    })), React.createElement(Table$ReactHooksTemplate.make, {
                  list: tmp,
                  onDissmiss: (function (id, evt) {
                      return Curry._1(reduce, onDismiss(state[/* results */0], state[/* searchTerm */1], id, evt));
                    })
                }), React.createElement("div", {
                  className: "interactions"
                }, React.createElement(WithLoad$ReactHooksTemplate.make, {
                      onClick: (function (evt) {
                          return Curry._1(reduce, onLoadMore((function (data) {
                                            return Curry._1(reduce, /* Update */Block.__(2, [data]));
                                          }), (function (b) {
                                            return Curry._1(reduce, /* UpdateLoad */Block.__(4, [b]));
                                          }), state[/* results */0], state[/* searchTerm */1], evt));
                        }),
                      isLoading: state[/* isLoading */2],
                      children: Utils$ReactHooksTemplate.s2e("More")
                    })));
}

var make = App;

exports.onDismiss = onDismiss;
exports.fetchSearchTopStories = fetchSearchTopStories;
exports.onSearchChange = onSearchChange;
exports.onSearchSubmit = onSearchSubmit;
exports.onLoadMore = onLoadMore;
exports.make = make;
/*  Not a pure module */
